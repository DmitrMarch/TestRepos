import vk_api
from vk_api.longpoll import VkLongPoll, VkEventType
import random
import requests
import os
import PIL
from PIL import Image
import imagehash
import shutil
from math import e
from math import pi
from math import sqrt
from math import log
from math import sin
from math import cos
from math import tan
from math import factorial as f
mod = abs
dict = {}
# –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –≤ —Ö—ç—à:
def imgs_urls(a):
    return a.replace(a, f'{file}/{a}')
def imgs_open(a):
    return Image.open(a)
def imgs_hashs(a):
    return str(imagehash.phash(a))
# –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ –•—ç–π–º–∏–Ω–≥–∞
def hamming_distance(hash2) -> int:
    distance = 0
    for i in range(len(hash)):
        if hash[i] != hash2[i]:
            distance += 1
    return distance
# –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∫–æ—Ç–∞
a = 16
# –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å–æ–±–∞–∫–∏
z = 3
# –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–µ–∫–æ —Ç—è–Ω
t = 2
bot = '''ü§ñ –ë–æ—Ç ü§ñ
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:
1‚É£  –î–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –§–æ—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å –Ω–∞–∂–º–∏—Ç–µ 
üëâPhotoüëà;
2‚É£  –î–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–∞–ø–∏—à–∏—Ç–µ üëâCalcüëà;
3‚É£  –î–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –†–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä –Ω–∞–ø–∏—à–∏—Ç–µ üëâRandüëà;
4‚É£  –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–º–µ–Ω—è—Ç—å —Å–≤–æ—ë –∏–º—è, –Ω–∞–ø–∏—à–∏—Ç–µ –ò–º—è üëâ–ù–æ–≤–æ–µ –∏–º—èüëà;
5‚É£  –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–π —á–∏—Å–ª–æ–≤–æ–π id, –Ω–∞–ø–∏—à–∏—Ç–µ üëâIdüëà;
6‚É£  –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —á—É–∂–æ–π —á–∏—Å–ª–æ–≤–æ–π id, –Ω–∞–ø–∏—à–∏—Ç–µ 
Id üëâ–∫–æ—Ä–æ—Ç–∫–∏–π –∞–¥—Ä–µ—Åüëà;
7‚É£  –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —á–∏—Å–ª–æ–≤–æ–π id –≥—Ä—É–ø–ø—ã, –Ω–∞–ø–∏—à–∏—Ç–µ 
Group id üëâ–∫–æ—Ä–æ—Ç–∫–∏–π –∞–¥—Ä–µ—Åüëà.
‚ùóP.s. –∫–æ—Ä–æ—Ç–∫–∏–π –∞–¥—Ä–µ—Å —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –±–µ–∑ @.'''

calc = '''‚ùé –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä ‚ùé
–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –∏ –æ—Å–æ–±—ã–µ —á–∏—Å–ª–∞:
1‚É£  –î–ª—è —Å–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –≤—ã—á–∏—Ç–∞–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ üëâ+üëà –∏–ª–∏ 
üëâ-üëà;
2‚É£  –î–ª—è —É–º–Ω–æ–∂–µ–Ω–∏—è –∏–ª–∏ –¥–µ–ª–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ üëâ*üëà –∏–ª–∏ üëâ/üëà;
3‚É£  –î–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞ –∏–ª–∏ —Ü–µ–ª–æ–π —á–∞—Å—Ç–∏ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ üëâ%üëà –∏–ª–∏ üëâ//üëà;
4‚É£  –î–ª—è –≤–æ–∑–≤–µ–¥–µ–Ω–∏—è –≤ —Å—Ç–µ–ø–µ–Ω—å –Ω–∞–ø–∏—à–∏—Ç–µ üëâ**üëà;
5‚É£  –î–ª—è –≤—ã–≤–µ–¥–µ–Ω–∏—è –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ –∫–æ—Ä–Ω—è –∏–∑ —á–∏—Å–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ 
üëâsqrt(—á–∏—Å–ª–æ)üëà;
6‚É£  –î–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –æ–±—ã—á–Ω–æ–≥–æ –∏–ª–∏ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∞—Ä–∏—Ñ–º–∞ –∏–∑ —á–∏—Å–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ 
üëâlog(—á–∏—Å–ª–æ, –æ—Å–Ω–æ–≤–∞–Ω–∏–µ)üëà –∏–ª–∏ üëâlog(—á–∏—Å–ª–æ)üëà;
7‚É£ –î–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è —á–∏—Å–µ–ª –µ –∏–ª–∏ –ü–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ üëâeüëà –∏–ª–∏ 
üëâpiüëà;
8‚É£  –î–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–∏–Ω—É—Å–∞, –∫–æ—Å–∏–Ω—É—Å–∞ –∏–ª–∏ —Ç–∞–Ω–≥–µ–Ω—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ üëâsin(—Ä–∞–¥–∏–∞–Ω—ã)üëà –∏–ª–∏ üëâcos(—Ä–∞–¥–∏–∞–Ω—ã)üëà –∏–ª–∏ 
üëâtan(—Ä–∞–¥–∏–∞–Ω—ã)üëà;
9‚É£  –î–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞ –∏–∑ —á–∏—Å–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ 
üëâf(—á–∏—Å–ª–æ)üëà;
üîü –î–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –º–æ–¥—É–ª—è –∏–∑ —á–∏—Å–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ 
üëâmod(—á–∏—Å–ª–æ)üëà.
‚ùóP.s. –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–∏–º–µ—Ä–∞ –Ω–∞–ø–∏—à–∏—Ç–µ: –†–µ—à–∏ üëâ–ø—Ä–∏–º–µ—Äüëà.'''

rand = '''‚ùì –†–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä ‚ùì
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä–∞:
1‚É£  –î–ª—è –≤—ã–±–æ—Ä–∞ –æ–¥–Ω–æ–≥–æ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –æ—Ç 1 –¥–æ 2 —á–∏—Å–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É 
üëâ—Ä–∞–Ω–¥ 1 —á–∏—Å–ª–æ 2 —á–∏—Å–ª–æüëà;
2‚É£  –î–ª—è –≤—ã–±–æ—Ä–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª(3 —á–∏—Å–ª–æ) –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –æ—Ç 1 –¥–æ 2 —á–∏—Å–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É 
üëâ–Ω–µ—Å—Ä–∞–Ω–¥3 —á–∏—Å–ª–æ 1 —á–∏—Å–ª–æ 2 —á–∏—Å–ª–æüëà;
3‚É£  –î–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É 
üëâc—Ä–∞–Ω–¥ 1 —Å–ª–æ–≤–æ 2 —Å–ª–æ–≤–æ –∏ —Ç.–¥.üëà;
4‚É£  –î–ª—è –≤—ã–±–æ—Ä–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤(–ß–∏—Å–ª–æ) –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É 
üëâ–Ω–µ—Åc—Ä–∞–Ω–¥–ß–∏—Å–ª–æ 1 —Å–ª–æ–≤–æ 2 —Å–ª–æ–≤–æ –∏ —Ç.–¥.üëà.
‚ùóP.s. —Å–ª—É—á–∞–π–Ω—ã–µ —á–∏—Å–ª–∞ –∏–ª–∏ —Å–ª–æ–≤–∞ –Ω–µ –ø–æ–≤–æ—Ç–æ—Ä—è—é—Ç—Å—è, –ø–æ—ç—Ç–æ–º—É –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 
–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–µ–ª –∏–ª–∏ —Å–ª–æ–≤ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –∏–ª–∏ —Å–ø–∏—Å–∫–µ; —á–∏—Å–ª–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –ø–∏—à—É—Ç—Å—è –æ—Ç –∏ –¥–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç 1 –¥–æ 
10 - —ç—Ç–æ —á–∏—Å–ª–∞ —Å 1 –ø–æ 9.'''

session = vk_api.VkApi(token="—Å—é–¥–∞ –≤—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω")
def write_msg(peer_id, message):
    session.method('messages.send', {
        'peer_id': peer_id,
        'message': message,
        'random_id': 0,
    })
for event in VkLongPoll(session).listen():
    try:
        if event.type == VkEventType.MESSAGE_NEW and event.to_me or event.from_me:
            text = event.text.lower()
            peer_id = event.peer_id
            user_id = event.user_id
            user = session.method('users.get', {
                "user_ids": user_id
            })
            name = user[0]['first_name'] + ' ' + user[0]['last_name']
            if user_id in dict:
                name = dict[user_id]
            # –≥–ª–∞–≤–Ω–∞—è –∏–Ω—Ñ–æ –∫–æ–º–∞–Ω–¥–∞ –ë–æ—Ç–∞:
            if 'bot' == text:
                write_msg(peer_id, f'{name}, –±–æ—Ç –≤–∞—Å –ø—Ä–∏–≤–µ—Ç—Å–≤—É–µ—Ç.\n' + bot)
            # –ø–µ—Ä–≤–∞—è –ø–æ–¥–≥–ª–∞–≤–Ω–∞—è –∏–Ω—Ñ–æ –∫–æ–º–∞–Ω–¥–∞ –ë–æ—Ç–∞:
            elif 'calc' == text:
                write_msg(peer_id, calc)
            # –≤—Ç–æ—Ä–∞—è –ø–æ–¥–≥–ª–∞–≤–Ω–∞—è –∏–Ω—Ñ–æ –∫–æ–º–∞–Ω–¥–∞ –ë–æ—Ç–∞:
            elif 'rand' == text:
                write_msg(peer_id, rand)
            elif 'photo' in text[:5] or 'photo' in text[29:34]:
                write_msg(peer_id,
                          'üì∑–§–æ—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—åüì∑\n–ù–∞–ø–∏—à–∏—Ç–µ –§–æ—Ç–æ üëâ—Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—éüëà, –∏ –±–æ—Ç –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å, '
                          '—á—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.\nP.s. –ø–æ–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫–æ—Ç–æ–≤, —Å–æ–±–∞–∫ –∏ –Ω–µ–∫–æ —Ç—è–Ω.')
            elif '—Ñ–æ—Ç–æ http' in text[:9] or '—Ñ–æ—Ç–æ\nhttp' in text[:8]:
                try:
                    cat_distance = 0
                    dog_distance = 0
                    neko_distance = 0
                    text = event.text[5:]
                    if 'amp;' in text:
                        url = text.replace('amp;', '')
                    else:
                        url = text
                    img = requests.get(
                        url,
                        headers={
                            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 "
                                          "(KHTML, like Gecko) Chrome/80.0.3987.122 Safari/537.36"
                        }).content
                    with open('photo.jpg', 'wb') as handler:
                        handler.write(img)
                    img = Image.open('photo.jpg')
                    hash = str(imagehash.phash(img))
                    file = 'Cats'
                    cat_imgs = os.listdir(file)
                    cat_imgs = list(map(imgs_urls, cat_imgs))
                    cat_imgs = list(map(imgs_open, cat_imgs))
                    cat_hashs = list(map(imgs_hashs, cat_imgs))
                    cat_distances = list(map(hamming_distance, cat_hashs))
                    file = 'Dogs'
                    dog_imgs = os.listdir(file)
                    dog_imgs = list(map(imgs_urls, dog_imgs))
                    dog_imgs = list(map(imgs_open, dog_imgs))
                    dog_hashs = list(map(imgs_hashs, dog_imgs))
                    dog_distances = list(map(hamming_distance, dog_hashs))
                    file = 'Neko'
                    neko_imgs = os.listdir(file)
                    neko_imgs = list(map(imgs_urls, neko_imgs))
                    neko_imgs = list(map(imgs_open, neko_imgs))
                    neko_hashs = list(map(imgs_hashs, neko_imgs))
                    neko_distances = list(map(hamming_distance, neko_hashs))
                    for distance in cat_distances:
                        if distance <= 10:
                            cat_distance += 1
                    for distance in dog_distances:
                        if distance <= 10:
                            dog_distance += 1
                    for distance in neko_distances:
                        if distance <= 10:
                            neko_distance += 1
                    if hash in cat_hashs:
                        write_msg(peer_id, '–≠—Ç–æ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –∫–æ—Ç–∞.')
                    elif hash in dog_hashs:
                        write_msg(peer_id, '–≠—Ç–æ –∫–∞—Ä—Ç–∏–Ω–∫–∞ —Å–æ–±–∞–∫–∏.')
                    elif hash in neko_hashs:
                        write_msg(peer_id, '–≠—Ç–æ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ–∫–æ —Ç—è–Ω.')
                    elif cat_distance >= 1:
                        write_msg(peer_id, '–ù–∞ –≤–∞—à–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫–æ—Ç? –ù–∞–ø–∏—à–∏—Ç–µ ‚úÖ–¥–∞ –∏–ª–∏ ‚ùå–Ω–µ—Ç.')
                        for event in VkLongPoll(session).listen():
                            if event.type == VkEventType.MESSAGE_NEW and event.to_me:
                                text = event.text.lower()
                                peer_id = event.peer_id
                                if '‚úÖ–¥–∞' in text[:3] or '‚úÖ–¥–∞' in text[29:32]:
                                    a += 1
                                    shutil.move('photo.jpg', f'Cats/cat_{a}.jpg')
                                    write_msg(peer_id, '–•–æ—Ä–æ—à–æ, —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∫–æ—Ç–æ–≤ —É–ª—É—á—à–∏–ª–æ—Å—å.')
                                    break
                                elif '‚ùå–Ω–µ—Ç' in text[:4] or '‚ùå–Ω–µ—Ç' in text[29:33]:
                                    write_msg(peer_id, '–ë–æ—Ç –µ—â—ë —É—á–∏—Ç—Å—è, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –µ–≥–æ —Ä–∞–∑–≤–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏–≤ –µ—â—ë –æ–¥–Ω—É '
                                                       '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.')
                                    break
                    elif dog_distance >= 1:
                        write_msg(peer_id, '–ù–∞ –≤–∞—à–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å–æ–±–∞–∫–∞? –ù–∞–ø–∏—à–∏—Ç–µ ‚úÖ–¥–∞ –∏–ª–∏ ‚ùå–Ω–µ—Ç.')
                        for event in VkLongPoll(session).listen():
                            if event.type == VkEventType.MESSAGE_NEW and event.to_me or event.from_me:
                                text = event.text.lower()
                                peer_id = event.peer_id
                                if '‚úÖ–¥–∞' in text[:3] or '‚úÖ–¥–∞' in text[29:32]:
                                    z += 1
                                    shutil.move('photo.jpg', f'Dogs/dog_{z}.jpg')
                                    write_msg(peer_id, '–•–æ—Ä–æ—à–æ, —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å–æ–±–∞–∫ —É–ª—É—á—à–∏–ª–æ—Å—å.')
                                    break
                                elif '‚ùå–Ω–µ—Ç' in text[:4] or '‚ùå–Ω–µ—Ç' in text[29:33]:
                                    write_msg(peer_id, '–ë–æ—Ç –µ—â—ë —É—á–∏—Ç—Å—è, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –µ–≥–æ —Ä–∞–∑–≤–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏–≤ –µ—â—ë –æ–¥–Ω—É '
                                                       '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.')
                                    break
                    elif neko_distance >= 1:
                        write_msg(peer_id, '–ù–∞ –≤–∞—à–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ–∫–æ —Ç—è–Ω? –ù–∞–ø–∏—à–∏—Ç–µ ‚úÖ–¥–∞ –∏–ª–∏ ‚ùå–Ω–µ—Ç.')
                        for event in VkLongPoll(session).listen():
                            if event.type == VkEventType.MESSAGE_NEW and event.to_me:
                                text = event.text.lower()
                                peer_id = event.peer_id
                                if '‚úÖ–¥–∞' in text[:3] or '‚úÖ–¥–∞' in text[29:32]:
                                    t += 1
                                    shutil.move('photo.jpg', f'Neko/neko_{t}.jpg')
                                    write_msg(peer_id, '–•–æ—Ä–æ—à–æ, —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–µ–∫–æ —Ç—è–Ω —É–ª—É—á—à–∏–ª–æ—Å—å.')
                                    break
                                elif '‚ùå–Ω–µ—Ç' in text[:4] or '‚ùå–Ω–µ—Ç' in text[29:33]:
                                    write_msg(peer_id, '–ë–æ—Ç –µ—â—ë —É—á–∏—Ç—Å—è, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –µ–≥–æ —Ä–∞–∑–≤–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏–≤ –µ—â—ë –æ–¥–Ω—É '
                                                       '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.')
                                    break
                    else:
                        write_msg(peer_id, '–ë–æ—Ç –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–æ–≥–æ, –∫—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.\n–ù–∞–ø–∏—à–∏—Ç–µ —Å–∞–º–∏.')
                        for event in VkLongPoll(session).listen():
                            if event.type == VkEventType.MESSAGE_NEW and event.to_me or event.from_me:
                                text = event.text.lower()
                                peer_id = event.peer_id
                                if '–∫–æ—Ç' in text or '–∫–æ—à–∫–∞' == text:
                                    a += 1
                                    shutil.move('photo.jpg', f'Cats/cat_{a}.jpg')
                                    write_msg(peer_id, '–•–æ—Ä–æ—à–æ, —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∫–æ—Ç–æ–≤ —É–ª—É—á—à–∏–ª–æ—Å—å.')
                                    break
                                elif '—Å–æ–±–∞–∫' in text[:5] or '—â–µ–Ω–æ' in text[:4]:
                                    z += 1
                                    shutil.move('photo.jpg', f'Dogs/dog_{z}.jpg')
                                    write_msg(peer_id, '–•–æ—Ä–æ—à–æ, —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å–æ–±–∞–∫ —É–ª—É—á—à–∏–ª–æ—Å—å.')
                                    break
                                elif '–Ω–µ–∫–æ' in text or '–∫–æ—à–∫–æ–¥–µ–≤–æ—á–∫–∞' == text:
                                    t += 1
                                    shutil.move('photo.jpg', f'Neko/neko_{t}.jpg')
                                    write_msg(peer_id, '–•–æ—Ä–æ—à–æ, —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–µ–∫–æ —Ç—è–Ω —É–ª—É—á—à–∏–ª–æ—Å—å.')
                                    break
                                else:
                                    write_msg(peer_id, '–ë–æ—Ç –µ—â—ë –Ω–µ –Ω–∞—É—á–∏–ª—Å—è –µ–≥–æ(–µ—ë) —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å.')
                                    break
                except requests.exceptions.InvalidURL:
                    write_msg(peer_id, 'üö´–û—à–∏–±–∫–∞, –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞üö´')
                except PIL.UnidentifiedImageError:
                    write_msg(peer_id, 'üö´–û—à–∏–±–∫–∞, –±–æ—Ç –Ω–µ —Å–º–æ–≥ –æ—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—éüö´')
                except TypeError:
                    write_msg(peer_id, 'üö´–û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –≤–∫üö´')
                except requests.exceptions.ConnectionError:
                    write_msg(peer_id, 'üö´–û—à–∏–±–∫–∞, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—éüö´')
            # –∏–º–µ–Ω–∞
            elif '–∏–º—è ' in text[:4].lower():
                nick = event.text[4:]
                dict[user_id] = nick
                write_msg(peer_id, f'@id{user_id} ({name}), –≤–∞—à–µ –Ω–æ–≤–æ–µ –∏–º—è - {nick}.\n–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ø –Ω–æ–≤—ã—Ö –∏–º—ë–Ω '
                                   f'–Ω–∞–ø–∏—à–∏—Ç–µ üëâ–ò–º–µ–Ω–∞üëà.\n–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ–µ –∏–º—è –Ω–∞–ø–∏—à–∏—Ç–µ üëâ–ö–∏–∫ –∏–º—èüëà.')
            elif '–∏–º–µ–Ω–∞' in text[:5]:
                s = []
                for b in dict.items():
                    user = session.method('users.get', {
                        "user_ids": b[0]
                    })
                    username = user[0]['first_name'] + ' ' + user[0]['last_name']
                    s.append(f'@id{b[0]} ({username}) - {b[1]}')
                top = '\n'.join(s)
                write_msg(peer_id, '–¢–æ–ø –Ω–æ–≤—ã—Ö –∏–º—ë–Ω:\n' + top)
            elif '–∫–∏–∫ –∏–º—è' in text[:7]:
                try:
                    nick = dict[user_id]
                    name = user[0]['first_name'] + ' ' + user[0]['last_name']
                    del dict[user_id]
                    write_msg(peer_id, f'@id{user_id} ({nick}), —Ç–µ–ø–µ—Ä—å –≤—ã —Å–Ω–æ–≤–∞ {name}.')
                except KeyError:
                    write_msg(peer_id, '–£ –≤–∞—Å –∏ —Ç–∞–∫ –Ω–µ—Ç –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏.')
            # —Å–≤–æ–π –∞–π–¥–∏
            elif 'id' == text:
                write_msg(peer_id, f'–¢–≤–æ–π –∞–π–¥–∏: {user_id}')
            # —á—É–∂–æ–π –∞–π–¥–∏
            elif 'id ' in text[:3]:
                try:
                    text = text.replace('id ', '')
                    user = session.method('users.get', {
                        "user_ids": text
                    })
                    id = user[0]['id']
                    write_msg(peer_id, f'–ê–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {id}')
                except vk_api.exceptions.ApiError:
                    write_msg(peer_id, 'üö´–û—à–∏–±–∫–∞, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥—ë–Ω –∫–æ—Ä–æ—Ç–∫–∏–π –∞–¥—Ä–µ—Åüö´')
            # –∞–π–¥–∏ –≥—Ä—É–ø–ø—ã
            elif 'group id ' in text[:9]:
                try:
                    text = text.replace('group id ', '')
                    group = session.method('groups.getById', {
                        "group_id": text
                    })
                    id = group[0]['id']
                    write_msg(peer_id, f'–ê–π–¥–∏ –≥—Ä—É–ø–ø—ã: {id}')
                except vk_api.exceptions.ApiError:
                    write_msg(peer_id, 'üö´–û—à–∏–±–∫–∞, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥—ë–Ω –∫–æ—Ä–æ—Ç–∫–∏–π –∞–¥—Ä–µ—Åüö´')
            # —Å–µ–∫—Ä–µ—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –ë–æ—Ç–∞
            elif 'exit' == text:
                user_id = event.user_id
                if user_id == 445186298:
                    write_msg(445186298, 'üí§–í—ã–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞üí§')
                    break
            # –∫–æ–º–∞–Ω–¥–∞ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞:
            elif '—Ä–µ—à–∏ ' in text[:5]:
                try:
                    string = text.replace('—Ä–µ—à–∏ ', '')
                    b = '–û—Ç–≤–µ—Ç: ' + str(eval(string))
                    if '.0' in b[-2:]:
                        c = b.replace('.0', '')
                        write_msg(peer_id, c)
                    else:
                        write_msg(peer_id, b)
                except NameError:
                    write_msg(peer_id, 'üö´–û—à–∏–±–∫–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∏–º–µ—Äüö´')
                except SyntaxError:
                    write_msg(peer_id, 'üö´–û—à–∏–±–∫–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∏–º–µ—Äüö´')
                except TypeError:
                    write_msg(peer_id, 'üö´–û—à–∏–±–∫–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∏–º–µ—Äüö´')
                except ZeroDivisionError:
                    write_msg(peer_id, 'üö´–ù–∞ 0 –¥–µ–ª–∏—Ç—å –Ω–µ–ª—å–∑—èüö´')
            # –∫–æ–º–∞–Ω–¥—ã –†–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä–∞:
            # —Å–ª—É—á–∞–π–Ω—ã–µ —á–∏—Å–ª–∞:
            # 1 —á–∏—Å–ª–æ:
            elif '—Ä–∞–Ω–¥ ' in text[:5]:
                try:
                    text = text.replace('—Ä–∞–Ω–¥ ', '').split()
                    d = int(text[0])
                    e = int(text[1])
                    f = range(d, e)
                    g = str(random.choice(f))
                    write_msg(peer_id, '–†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ: ' + g)
                except ValueError:
                    write_msg(peer_id, 'üö´–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥—ë–Ω –¥–∏–∞–ø–∞–∑–æ–Ω —á–∏—Å–µ–ªüö´')
                except NameError:
                    write_msg(peer_id, 'üö´–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥—ë–Ω –¥–∏–∞–ø–∞–∑–æ–Ω —á–∏—Å–µ–ªüö´')
                except IndexError:
                    write_msg(peer_id, 'üö´–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥—ë–Ω –¥–∏–∞–ø–∞–∑–æ–Ω —á–∏—Å–µ–ªüö´')
                except TypeError:
                    write_msg(peer_id, 'üö´–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥—ë–Ω –¥–∏–∞–ø–∞–∑–æ–Ω —á–∏—Å–µ–ªüö´')
                except SyntaxError:
                    write_msg(peer_id, 'üö´–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥—ë–Ω –¥–∏–∞–ø–∞–∑–æ–Ω —á–∏—Å–µ–ªüö´')
            # –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∏—Å–µ–ª:
            elif '–Ω–µ—Å—Ä–∞–Ω–¥' in text[:7]:
                try:
                    text = text.replace('–Ω–µ—Å—Ä–∞–Ω–¥', '')
                    g = int(text[:text.index(' ')])
                    text = text[text.index(' '):].split()
                    d = int(text[0])
                    e = int(text[1])
                    f = range(d, e)
                    h = str(random.sample(f, g))
                    write_msg(peer_id, '–†–∞–Ω–¥–æ–º–Ω—ã–µ —á–∏—Å–ª–∞: ' + h[1:-1])
                except ValueError:
                    write_msg(peer_id, 'üö´–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–µ–ª –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ, –∏–ª–∏ –æ–Ω–∏ '
                                       '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω—ãüö´')
                except NameError:
                    write_msg(peer_id, 'üö´–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –¥–∏–∞–ø–∞–∑–æ–Ω —á–∏—Å–µ–ª –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ªüö´')
                except IndexError:
                    write_msg(peer_id, 'üö´–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –¥–∏–∞–ø–∞–∑–æ–Ω —á–∏—Å–µ–ª –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ªüö´')
                except TypeError:
                    write_msg(peer_id, 'üö´–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –¥–∏–∞–ø–∞–∑–æ–Ω —á–∏—Å–µ–ª –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ªüö´')
                except SyntaxError:
                    write_msg(peer_id, 'üö´–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –¥–∏–∞–ø–∞–∑–æ–Ω —á–∏—Å–µ–ª –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ªüö´')
            # —Å–ª—É—á–∞–π–Ω—ã–µ —Å–ª–æ–≤–∞:
            # 1 —Å–ª–æ–≤–æ:
            elif '—Å—Ä–∞–Ω–¥' in text[:5]:
                try:
                    lw = text.replace('—Å—Ä–∞–Ω–¥ ', '').split()
                    rw = random.choice(lw)
                    write_msg(peer_id, '–°–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ: ' + rw)
                except ValueError:
                    write_msg(peer_id, 'üö´–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥—ë–Ω —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤üö´')
                except NameError:
                    write_msg(peer_id, 'üö´–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥—ë–Ω —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤üö´')
                except IndexError:
                    write_msg(peer_id, 'üö´–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥—ë–Ω —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤üö´')
                except TypeError:
                    write_msg(peer_id, 'üö´–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥—ë–Ω —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤üö´')
                except SyntaxError:
                    write_msg(peer_id, 'üö´–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥—ë–Ω —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤üö´')
            # –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤:
            elif '–Ω–µ—Å—Å—Ä–∞–Ω–¥' in text[:8]:
                try:
                    text = text.replace('–Ω–µ—Å—Å—Ä–∞–Ω–¥', '')
                    n = int(text[:text.index(' ')])
                    lw = text = text[text.index(' '):].split()
                    lrw = str(random.sample(lw, n))[1:-1].replace("'", '')
                    write_msg(peer_id, '–†–∞–Ω–¥–æ–º–Ω—ã–µ —Å–ª–æ–≤–∞: ' + lrw)
                except ValueError:
                    write_msg(peer_id, 'üö´–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ —Å–ø–∏—Å–∫–µ, –∏–ª–∏ –æ–Ω–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ '
                                       '–≤–≤–µ–¥–µ–Ω—ãüö´')
                except NameError:
                    write_msg(peer_id, 'üö´–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω—ã —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤üö´')
                except IndexError:
                    write_msg(peer_id, 'üö´–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω—ã —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤üö´')
                except TypeError:
                    write_msg(peer_id, 'üö´–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω—ã —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤üö´')
                except SyntaxError:
                    write_msg(peer_id, 'üö´–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω—ã —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤üö´')
    except Exception as aboba:
        print(aboba)
