# !!!!!–ó–ù–ê–ß–ö–û–ú ü§° –ü–û–ú–ï–ß–ï–ù–´ –ú–ï–°–¢–ê, –ì–î–ï –ù–£–ñ–ù–ê –ó–ú–ï–ù–ê!!!!!

# –¥–ª—è —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –≤–∫
import vk_api
from vk_api.longpoll import VkLongPoll, VkEventType

# –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –†–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä–∞
import random

# –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏
import requests
import os
import PIL
from PIL import Image
import imagehash
import shutil
from fuzzywuzzy import fuzz

# –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
from math import e, pi, sqrt, log, sin, cos, tan, factorial as f
mod = abs

# —Å–ª–æ–≤–∞—Ä—å –∏–º—ë–Ω (–µ–≥–æ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—É—Ç –°–ª–æ–≤–∞—Ä—å –∏–º—ë–Ω.txt)
with open('–°–ª–æ–≤–∞—Ä—å –∏–º—ë–Ω.txt', 'r', encoding='utf-8') as dict_names:
    dict_names1 = eval(dict_names.read())

# –∑–Ω–∞—á–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–∏—è (ex = 0) / –≤—ã–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–≥–∏ (ex = 1)
ex = 0

# –Ω–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–ª–∞ –∏ –µ–≥–æ –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–ª–æ–≤–∞—Ä—å —Ç—É—Ç –ó–Ω–∞—á–µ–Ω–∏—è –∫–ª–∏–∫–µ—Ä–∞.txt)
with open('–ó–Ω–∞—á–µ–Ω–∏—è –∫–ª–∏–∫–µ—Ä–∞.txt', 'r') as dict_klicker:
    dict_klicker1 = eval(dict_klicker.read())

# –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫ –∏–∑ —Å–ª–æ–≤–∞—Ä—è –ó–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫.txt
with open('–ó–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫.txt', 'r') as dict_values:
    dict_values1 = eval(dict_values.read())
    cat = dict_values1['cat']  # –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∫–æ—Ç–∞
    dog = dict_values1['dog']  # –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å–æ–±–∞–∫–∏
    neko = dict_values1['neko']  # –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∫–æ—à–∫–æ–¥–µ–≤–æ—á–∫–∏
    other = dict_values1['other']  # –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥—Ä—É–≥–æ–µ

bot = '''ü§ñ –ë–æ—Ç ü§ñ
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:
1‚É£  –§–æ—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å - 
üëâPhotoüëà;
2‚É£  –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä - 
üëâCalcüëà;
3‚É£  –†–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä - 
üëâRandüëà;
4‚É£  –í—ã—Ö–æ–¥ –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –±–æ—Ç–∞ - üëâ–ù–∞–∑–∞–¥üëà;
5‚É£  –°–º–µ–Ω–∞ –∏–º–µ–Ω–∏ - –ò–º—è 
üëâ–ù–æ–≤–æ–µ –∏–º—èüëà;
6‚É£  –°–≤–æ–π —á–∏—Å–ª–æ–≤–æ–π id - 
üëâIdüëà;
7‚É£  –ß—É–∂–æ–π —á–∏—Å–ª–æ–≤–æ–π id - Id 
üëâ–∫–æ—Ä–æ—Ç–∫–∏–π –∞–¥—Ä–µ—Åüëà;
8‚É£  –ß–∏—Å–ª–æ–≤–æ–π id –≥—Ä—É–ø–ø—ã - Group id 
üëâ–∫–æ—Ä–æ—Ç–∫–∏–π –∞–¥—Ä–µ—Åüëà.
‚ùóP.s. –∫–æ—Ä–æ—Ç–∫–∏–π –∞–¥—Ä–µ—Å —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –±–µ–∑ @.'''

calc = '''‚ùé –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä ‚ùé
–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –∏ –æ—Å–æ–±—ã–µ —á–∏—Å–ª–∞:
1‚É£  –°–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –≤—ã—á–∏—Ç–∞–Ω–∏–µ - üëâ+üëà –∏–ª–∏ 
üëâ-üëà;
2‚É£  –£–º–Ω–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –¥–µ–ª–µ–Ω–∏–µ - üëâ*üëà –∏–ª–∏ 
üëâ/üëà;
3‚É£  –û—Å—Ç–∞—Ç–æ–∫ –∏–ª–∏ —Ü–µ–ª–∞—è —á–∞—Å—Ç—å –æ—Ç –¥–µ–ª–µ–Ω–∏—è - üëâ%üëà –∏–ª–∏ üëâ//üëà;
4‚É£  –í–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–ø–µ–Ω—å - 
üëâ**üëà;
5‚É£  –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å –∏–∑ —á–∏—Å–ª–∞ - üëâsqrt(—á–∏—Å–ª–æ)üëà;
6‚É£  –û–±—ã—á–Ω—ã–π –∏–ª–∏ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π –ª–æ–≥–∞—Ä–∏—Ñ–º –∏–∑ —á–∏—Å–ª–∞ - 
üëâlog(—á–∏—Å–ª–æ, –æ—Å–Ω–æ–≤–∞–Ω–∏–µ)üëà 
–∏–ª–∏ üëâlog(—á–∏—Å–ª–æ)üëà;
7‚É£  –ß–∏—Å–ª–∞ –µ –∏–ª–∏ –ü–∏ - 
üëâeüëà –∏–ª–∏ üëâpiüëà;
8‚É£  –°–∏–Ω—É—Å, –∫–æ—Å–∏–Ω—É—Å –∏–ª–∏ —Ç–∞–Ω–≥–µ–Ω—Å - 
üëâsin(—Ä–∞–¥–∏–∞–Ω—ã)üëà –∏–ª–∏ 
üëâcos(—Ä–∞–¥–∏–∞–Ω—ã)üëà –∏–ª–∏ 
üëâtan(—Ä–∞–¥–∏–∞–Ω—ã)üëà;
9‚É£  –§–∞–∫—Ç–æ—Ä–∏–∞–ª –∏–∑ —á–∏—Å–ª–∞ - 
üëâf(—á–∏—Å–ª–æ)üëà;
üîü –ú–æ–¥—É–ª—å –∏–∑ —á–∏—Å–ª–∞ - 
üëâmod(—á–∏—Å–ª–æ)üëà.
‚ùóP.s. –≤–≤–æ–¥ –ø—Ä–∏–º–µ—Ä–∞ - –†–µ—à–∏ 
üëâ–ø—Ä–∏–º–µ—Äüëà.'''

rand = '''‚ùì –†–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä ‚ùì
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä–∞:
1‚É£  –í—ã–±–æ—Ä –æ–¥–Ω–æ–≥–æ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –æ—Ç 1 –¥–æ 2 —á–∏—Å–ª–∞ - 
üëâ—Ä–∞–Ω–¥ 1 —á–∏—Å–ª–æ 2 —á–∏—Å–ª–æüëà;
2‚É£  –í—ã–±–æ—Ä –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª(3 —á–∏—Å–ª–æ) –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –æ—Ç 1 –¥–æ 2 —á–∏—Å–ª–∞ - üëâ–Ω–µ—Å—Ä–∞–Ω–¥3 —á–∏—Å–ª–æ 1 —á–∏—Å–ª–æ 2 —á–∏—Å–ª–æüëà;
3‚É£  –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤ - üëâc—Ä–∞–Ω–¥ 1 —Å–ª–æ–≤–æ 2 —Å–ª–æ–≤–æ –∏ —Ç.–¥.üëà;
4‚É£  –í—ã–±–æ—Ä –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤(–ß–∏—Å–ª–æ) –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤ - üëâ–Ω–µ—Åc—Ä–∞–Ω–¥–ß–∏—Å–ª–æ 1 —Å–ª–æ–≤–æ 2 —Å–ª–æ–≤–æ –∏ —Ç.–¥.üëà.
‚ùóP.s. —Å–ª—É—á–∞–π–Ω—ã–µ —á–∏—Å–ª–∞ –∏–ª–∏ —Å–ª–æ–≤–∞ –Ω–µ –ø–æ–≤–æ—Ç–æ—Ä—è—é—Ç—Å—è, –ø–æ—ç—Ç–æ–º—É –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 
–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–µ–ª –∏–ª–∏ —Å–ª–æ–≤ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –∏–ª–∏ —Å–ø–∏—Å–∫–µ; —á–∏—Å–ª–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –ø–∏—à—É—Ç—Å—è –æ—Ç –∏ –¥–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç 1 –¥–æ 
10 - —ç—Ç–æ —á–∏—Å–ª–∞ —Å 1 –ø–æ 9.'''

# –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é —Ç–æ–∫–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—èü§°
session = vk_api.VkApi(token="–°–Æ–î–ê –°–í–û–ô –¢–û–ö–ï–ù")  # –µ–≥–æ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ 
# https://oauth.vk.com/token?grant_type=password&client_id=6146827&client_secret=qVxWRF1CwHERuIrKBnqe&username=login&password=password
# –≤–º–µ—Å—Ç–æ login –∏ password –≤—Å—Ç–∞–≤–ª—è–µ—à—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –ø–∞—Ä–æ–ª—å

# –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –≤ —Ö—ç—à
def imgs_urls(val):
    return val.replace(val, f'{file}/{val}')

def imgs_open(val):
    return Image.open(val)

def imgs_hashs(val):
    return str(imagehash.phash(val))

# –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —Å—Ö–æ–∂–µ—Å—Ç–∏ –≤ %
def similarity(hash2):
    return fuzz.token_sort_ratio(hash1, hash2)

# –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
def write_msg(peer_id, message):
    session.method('messages.send', {
        'peer_id': peer_id,
        'message': message,
        'random_id': 0
    })

# –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
def msg_info(msg_id):
    return session.method('messages.getById', {
        'message_ids': msg_id,
        'extended': 1
    })

# –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ—ã –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ –µ–≥–æ –∞–π–¥–∏
def user_info(user_id):
    return session.method('users.get', {
        "user_ids": user_id
    })

# –≤–µ—á–Ω—ã–π —Ü–∏–∫–ª –≤–∞–π–ª
while 1:

    # —Å–µ–∫—Ä–µ—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞
    if ex == 1:

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–π-—ç–∫—Å–µ–ø—Ç —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ñ–æ—Ä –Ω–∞ –ø–æ—Ç–µ—Ä—é —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –≤–∫
        try:
            for event in VkLongPoll(session).listen():
                if event.type == VkEventType.MESSAGE_NEW and event.to_me or event.from_me:
                    text = event.text.lower()  # —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                    peer_id = event.peer_id  # —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–π–¥–∏ —á–∞—Ç–∞ (–¥–ª—è –≥—Ä—É–ø–ø—ã, –±–µ—Å–µ–¥—ã –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
                    try:  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        user_id = event.user_id  # –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    except AttributeError:  # —á—Ç–æ –±–æ—Ç –¥–µ–ª–∞–µ—Ç –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                        continue
                    if 'start' == text:
                        if user_id == 445186298:  # —Ç–≤–æ–π –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            write_msg(peer_id, '‚òï–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞‚òï')
                            break
        except requests.exceptions.ReadTimeout:
            print('–ü–æ—Ç–µ—Ä—è–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –≤–∫ –≤ —Å–µ–∫—Ä–µ—Ç–Ω–æ–º —Ü–∏–∫–ª–µ —Ñ–æ—Ä')

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–π-—ç–∫—Å–µ–ø—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ñ–æ—Ä –Ω–∞ –ø–æ—Ç–µ—Ä—é —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –≤–∫
    try:

        # –±–æ—Ç —Å–ª—É—à–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –≤–∫
        for event in VkLongPoll(session).listen():
            if event.type == VkEventType.MESSAGE_NEW and event.to_me or event.from_me:  # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏—è
                text = event.text.lower()  # —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                peer_id = event.peer_id  # —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–π–¥–∏ —á–∞—Ç–∞ (–¥–ª—è –≥—Ä—É–ø–ø—ã, –±–µ—Å–µ–¥—ã –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
                try:  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_id = event.user_id  # –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                except AttributeError:  # —á—Ç–æ –±–æ—Ç –¥–µ–ª–∞–µ—Ç –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                    continue
                atchs = event.attachments  # –≤–ª–æ–∂–µ–Ω–∏—è

                # –≥–ª–∞–≤–Ω–∞—è –∏–Ω—Ñ–æ –∫–æ–º–∞–Ω–¥–∞ –ë–æ—Ç–∞
                if 'bot' == text:
                    user = user_info(user_id)  # –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ—ã –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ –µ–≥–æ –∞–π–¥–∏
                    name = user[0]['first_name'] + ' ' + user[0]['last_name']  # –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if user_id in dict_names1:  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ª–æ–≤–∞—Ä–µ
                        name = dict_names1[user_id]  # –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –µ–≥–æ –≤ —Å–ª–æ–≤–∞—Ä–µ
                    write_msg(peer_id, f'ü§ñ {name}, –±–æ—Ç –≤–∞—Å –ø—Ä–∏–≤–µ—Ç—Å–≤—É–µ—Ç ü§ñ\n' + bot)

                # –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∏–Ω—Ñ–æ
                elif 'calc' == text:
                    write_msg(peer_id, calc)

                # –†–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä –∏–Ω—Ñ–æ
                elif 'rand' == text:
                    write_msg(peer_id, rand)

                # –§–æ—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å –∏–Ω—Ñ–æ
                elif 'photo' == text:
                    write_msg(peer_id, 'üì∑–§–æ—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—åüì∑\n–ù–∞–ø–∏—à–∏—Ç–µ üëâ–§–æ—Ç–æüëà –≤–º–µ—Å—Ç–µ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –∏ –±–æ—Ç '
                                       '–ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –µ—ë —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å.\nP.s. –ø–æ–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫–æ—Ç–æ–≤, —Å–æ–±–∞–∫ '
                                       '–∏ –∫–æ—à–∫–æ–¥–µ–≤–æ—á–µ–∫.')

                # –∫–æ–º–∞–Ω–¥—ã –§–æ—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—è
                elif '—Ñ–æ—Ç–æ' == text and atchs != {} and atchs['attach1_type'] == 'photo':
                    try:
                        url = 0
                        cat_distance = 0
                        dog_distance = 0
                        neko_distance = 0
                        other_distance = 0
                        user_id1 = event.user_id
                        msg_id = event.message_id
                        info = msg_info(msg_id)
                        sizes = (info['items'][0]['attachments'][0]['photo']['sizes'])
                        s_w = []
                        for size in sizes:
                            width = size['width']
                            s_w.append(width)
                        max_w = max(s_w)
                        min_w = min(s_w)
                        if max_w == min_w:
                            url = sizes[0]['url']
                        else:
                            for size in sizes:
                                width = size['width']
                                if width == max_w:
                                    url = size['url']
                        img = requests.get(
                            url,
                            headers={
                                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 "
                                              "(KHTML, like Gecko) Chrome/80.0.3987.122 Safari/537.36"
                            }).content
                        with open('photo.jpg', 'wb') as handler:
                            handler.write(img)
                        img = Image.open('photo.jpg')
                        hash1 = str(imagehash.phash(img))
                        file = 'Cats'  # –ø–∞–ø–∫–∞ —Å –∫–æ—Ç–∞–º–∏ (–≤—Å–µ –ø–∞–ø–∫–∏ –ø—Ä–∏–ª–∞–≥–∞—é—Ç—Å—è)
                        cat_imgs = os.listdir(file)
                        cat_url_imgs = list(map(imgs_urls, cat_imgs))
                        cat_open_imgs = list(map(imgs_open, cat_url_imgs))
                        cat_hashs = list(map(imgs_hashs, cat_open_imgs))
                        cat_distances = list(map(similarity, cat_hashs))
                        file = 'Dogs'  # –ø–∞–ø–∫–∞ —Å —Å–æ–±–∞–∫–∞–º–∏
                        dog_imgs = os.listdir(file)
                        dog_url_imgs = list(map(imgs_urls, dog_imgs))
                        dog_open_imgs = list(map(imgs_open, dog_url_imgs))
                        dog_hashs = list(map(imgs_hashs, dog_open_imgs))
                        dog_distances = list(map(similarity, dog_hashs))
                        file = 'Nekot'  # –ø–∞–ø–∫–∞ —Å –Ω–µ–∫–æ —Ç—è–Ω
                        neko_imgs = os.listdir(file)
                        neko_url_imgs = list(map(imgs_urls, neko_imgs))
                        neko_open_imgs = list(map(imgs_open, neko_url_imgs))
                        neko_hashs = list(map(imgs_hashs, neko_open_imgs))
                        neko_distances = list(map(similarity, neko_hashs))
                        file = 'Others'  # –ø–∞–ø–∫–∞ —Å –ø–∏–∫—á–∞–º–∏ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥—Ä—É–≥–æ–µ
                        other_imgs = os.listdir(file)
                        other_url_imgs = list(map(imgs_urls, other_imgs))
                        other_open_imgs = list(map(imgs_open, other_url_imgs))
                        other_hashs = list(map(imgs_hashs, other_open_imgs))
                        other_distances = list(map(similarity, other_hashs))
                        other_dict = dict(zip(other_hashs, other_imgs))
                        other_dict2 = dict(zip(other_distances, other_imgs))
                        for distance in cat_distances:
                            if distance >= 60:
                                cat_distance += 1
                        for distance in dog_distances:
                            if distance >= 60:
                                dog_distance += 1
                        for distance in neko_distances:
                            if distance >= 60:
                                neko_distance += 1
                        for distance in other_distances:
                            if distance >= 60:
                                other_distance += 1
                        if hash1 in cat_hashs:
                            write_msg(peer_id, '–≠—Ç–æ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –∫–æ—Ç–∞.')
                        elif hash1 in dog_hashs:
                            write_msg(peer_id, '–≠—Ç–æ –∫–∞—Ä—Ç–∏–Ω–∫–∞ —Å–æ–±–∞–∫–∏.')
                        elif hash1 in neko_hashs:
                            write_msg(peer_id, '–≠—Ç–æ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –∫–æ—à–∫–æ–¥–µ–≤–æ—á–∫–∏.')
                        elif hash1 in other_hashs:
                            other_name = other_dict[hash1]
                            if '_' in other_name:
                                other_name = other_name[:other_name.index('_')]
                            else:
                                other_name = other_name[:other_name.index('.')]
                            write_msg(peer_id, f'–ù–∞ —Ñ–æ—Ç–æ {other_name}.')
                        elif cat_distance >= 1:
                            write_msg(peer_id, '–ë–æ—Ç –æ–±–Ω–∞—Ä—É–∂–∏–ª –∫–æ—Ç–∞ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ? –ù–∞–ø–∏—à–∏—Ç–µ –î–∞ –∏–ª–∏ –ù–µ—Ç.')
                            for event in VkLongPoll(session).listen():
                                if event.type == VkEventType.MESSAGE_NEW and event.to_me or event.from_me:
                                    user_id2 = event.user_id
                                    text = event.text.lower()
                                    if '–¥–∞' == text and user_id2 == user_id1:
                                        cat += 1
                                        dict_values1['cat'] = cat
                                        with open('–ó–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫.txt', 'w') as dict_values:
                                            dict_values.write(str(dict_values1))
                                        shutil.move('photo.jpg', f'Cats/cat_{cat}.jpg')
                                        write_msg(peer_id, '–•–æ—Ä–æ—à–æ, —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∫–æ—Ç–æ–≤ —É–ª—É—á—à–∏–ª–æ—Å—å.')
                                        break
                                    elif '–Ω–µ—Ç' == text and user_id2 == user_id1:
                                        write_msg(peer_id, '–ë–æ—Ç –µ—â—ë —É—á–∏—Ç—Å—è, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —Ç–æ–≥–æ, —á—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ.')
                                        for event in VkLongPoll(session).listen():
                                            if event.type == VkEventType.MESSAGE_NEW and event.to_me or event.from_me:
                                                user_id2 = event.user_id
                                                text = event.text.lower()
                                                other_value = 0
                                                for value in other_dict.values():
                                                    if '_' in value:
                                                        value = value[:value.index('_')]
                                                    else:
                                                        value = value[:value.index('.')]
                                                    if text == value:
                                                        other_value = value
                                                if ('–∫–æ—Ç' in text or '–∫–æ—à–∫–∞' == text or '–∫–æ—à–∫–∏' == text or '–∫–æ—à–∞–∫' in
                                                        text) and user_id2 == user_id1:
                                                    cat += 1
                                                    dict_values1['cat'] = cat
                                                    with open('–ó–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫.txt', 'w') as dict_values:
                                                        dict_values.write(str(dict_values1))
                                                    shutil.move('photo.jpg', f'Cats/cat_{cat}.jpg')
                                                    write_msg(peer_id, '–•–æ—Ä–æ—à–æ, —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∫–æ—Ç–æ–≤ —É–ª—É—á—à–∏–ª–æ—Å—å.')
                                                    break
                                                elif ('—Å–æ–±–∞–∫' in text or '—â–µ–Ω–æ' in text or '–ø–µ—Å' in text or '–ø—ë—Å' in
                                                      text) and user_id2 == user_id1:
                                                    dog += 1
                                                    dict_values1['dog'] = dog
                                                    with open('–ó–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫.txt', 'w') as dict_values:
                                                        dict_values.write(str(dict_values1))
                                                    shutil.move('photo.jpg', f'Dogs/dog_{dog}.jpg')
                                                    write_msg(peer_id, '–•–æ—Ä–æ—à–æ, —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å–æ–±–∞–∫ —É–ª—É—á—à–∏–ª–æ—Å—å.')
                                                    break
                                                elif ('–Ω–µ–∫–æ' in text or '–∫–æ—à–∫–æ–¥–µ–≤–æ—á–∫–∞' == text or '–∫–æ—à–∫–æ–¥–µ–≤–æ—á–∫–∏' ==
                                                      text) and user_id2 == user_id1:
                                                    neko += 1
                                                    dict_values1['neko'] = neko
                                                    with open('–ó–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫.txt', 'w') as dict_values:
                                                        dict_values.write(str(dict_values1))
                                                    shutil.move('photo.jpg', f'Nekot/neko_{neko}.jpg')
                                                    write_msg(peer_id, '–•–æ—Ä–æ—à–æ, —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∫–æ—à–∫–æ–¥–µ–≤–æ—á–µ–∫ —É–ª—É—á—à–∏–ª–æ—Å—å.')
                                                    break
                                                elif text == other_value and user_id2 == user_id1:
                                                    other += 1
                                                    dict_values1['other'] = other
                                                    with open('–ó–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫.txt', 'w') as dict_values:
                                                        dict_values.write(str(dict_values1))
                                                    shutil.move('photo.jpg', f'Others/{text}_{other}.jpg')
                                                    write_msg(peer_id, f'–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '
                                                                       f'"{text}" —É–ª—É—á—à–µ–Ω–æ.')
                                                    break
                                                elif ('/' == text or '\\' == text or '&quot;' == text or '&lt;' ==
                                                      text or '&gt;' == text or '|' == text or '*' == text or '?' ==
                                                      text or ':' == text) and user_id2 == user_id1:
                                                    write_msg(peer_id, '–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏–º–≤–æ–ª—ã /, \\, *, :, ?, <, '
                                                                       '>, |, ".')
                                                elif user_id2 == user_id1 and text != '–Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏–º–≤–æ–ª—ã ' \
                                                                                      '/, \\, *, :, ?, &lt;, &gt;, ' \
                                                                                      '|, &quot;.':
                                                    other += 1
                                                    dict_values1['other'] = other
                                                    with open('–ó–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫.txt', 'w') as dict_values:
                                                        dict_values.write(str(dict_values1))
                                                    shutil.move('photo.jpg', f'Others/{text}_{other}.jpg')
                                                    write_msg(peer_id, '–ë–æ—Ç –µ—â—ë –Ω–µ –Ω–∞—É—á–∏–ª—Å—è –µ–≥–æ(–µ—ë) —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å, —Ñ–æ—Ç–æ '
                                                                       '–¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–∞–ø–∫—É —Å –±—É–¥—É—â–∏–º–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –¥–ª—è '
                                                                       '—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.')
                                                    break
                                        break
                        elif dog_distance >= 1:
                            write_msg(peer_id, '–ë–æ—Ç –æ–±–Ω–∞—Ä—É–∂–∏–ª —Å–æ–±–∞–∫—É –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ? –ù–∞–ø–∏—à–∏—Ç–µ '
                                               '–î–∞ –∏–ª–∏ –ù–µ—Ç.')
                            for event in VkLongPoll(session).listen():
                                if event.type == VkEventType.MESSAGE_NEW and event.to_me or event.from_me:
                                    user_id2 = event.user_id
                                    text = event.text.lower()
                                    if '–¥–∞' == text and user_id2 == user_id1:
                                        cat += 1
                                        dict_values1['cat'] = cat
                                        with open('–ó–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫.txt', 'w') as dict_values:
                                            dict_values.write(str(dict_values1))
                                        shutil.move('photo.jpg', f'Cats/cat_{cat}.jpg')
                                        write_msg(peer_id, '–•–æ—Ä–æ—à–æ, —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∫–æ—Ç–æ–≤ —É–ª—É—á—à–∏–ª–æ—Å—å.')
                                        break
                                    elif '–Ω–µ—Ç' == text and user_id2 == user_id1:
                                        write_msg(peer_id, '–ë–æ—Ç –µ—â—ë —É—á–∏—Ç—Å—è, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —Ç–æ–≥–æ, —á—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ.')
                                        for event in VkLongPoll(session).listen():
                                            if event.type == VkEventType.MESSAGE_NEW and event.to_me or event.from_me:
                                                user_id2 = event.user_id
                                                text = event.text.lower()
                                                other_value = 0
                                                for value in other_dict.values():
                                                    if '_' in value:
                                                        value = value[:value.index('_')]
                                                    else:
                                                        value = value[:value.index('.')]
                                                    if text == value:
                                                        other_value = value
                                                if ('–∫–æ—Ç' in text or '–∫–æ—à–∫–∞' == text or '–∫–æ—à–∫–∏' == text or '–∫–æ—à–∞–∫' in
                                                        text) and user_id2 == user_id1:
                                                    cat += 1
                                                    dict_values1['cat'] = cat
                                                    with open('–ó–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫.txt', 'w') as dict_values:
                                                        dict_values.write(str(dict_values1))
                                                    shutil.move('photo.jpg', f'Cats/cat_{cat}.jpg')
                                                    write_msg(peer_id, '–•–æ—Ä–æ—à–æ, —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∫–æ—Ç–æ–≤ —É–ª—É—á—à–∏–ª–æ—Å—å.')
                                                    break
                                                elif ('—Å–æ–±–∞–∫' in text or '—â–µ–Ω–æ' in text or '–ø–µ—Å' in text or '–ø—ë—Å' in
                                                      text) and user_id2 == user_id1:
                                                    dog += 1
                                                    dict_values1['dog'] = dog
                                                    with open('–ó–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫.txt', 'w') as dict_values:
                                                        dict_values.write(str(dict_values1))
                                                    shutil.move('photo.jpg', f'Dogs/dog_{dog}.jpg')
                                                    write_msg(peer_id, '–•–æ—Ä–æ—à–æ, —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å–æ–±–∞–∫ —É–ª—É—á—à–∏–ª–æ—Å—å.')
                                                    break
                                                elif ('–Ω–µ–∫–æ' in text or '–∫–æ—à–∫–æ–¥–µ–≤–æ—á–∫–∞' == text or '–∫–æ—à–∫–æ–¥–µ–≤–æ—á–∫–∏' ==
                                                      text) and user_id2 == user_id1:
                                                    neko += 1
                                                    dict_values1['neko'] = neko
                                                    with open('–ó–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫.txt', 'w') as dict_values:
                                                        dict_values.write(str(dict_values1))
                                                    shutil.move('photo.jpg', f'Nekot/neko_{neko}.jpg')
                                                    write_msg(peer_id, '–•–æ—Ä–æ—à–æ, —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∫–æ—à–∫–æ–¥–µ–≤–æ—á–µ–∫ —É–ª—É—á—à–∏–ª–æ—Å—å.')
                                                    break
                                                elif text == other_value and user_id2 == user_id1:
                                                    other += 1
                                                    dict_values1['other'] = other
                                                    with open('–ó–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫.txt', 'w') as dict_values:
                                                        dict_values.write(str(dict_values1))
                                                    shutil.move('photo.jpg', f'Others/{text}_{other}.jpg')
                                                    write_msg(peer_id, f'–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '
                                                                       f'"{text}" —É–ª—É—á—à–µ–Ω–æ.')
                                                    break
                                                elif ('/' == text or '\\' == text or '&quot;' == text or '&lt;' ==
                                                      text or '&gt;' == text or '|' == text or '*' == text or '?' ==
                                                      text or ':' == text) and user_id2 == user_id1:
                                                    write_msg(peer_id, '–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏–º–≤–æ–ª—ã /, \\, *, :, ?, <, '
                                                                       '>, |, ".')
                                                elif user_id2 == user_id1 and text != '–Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏–º–≤–æ–ª—ã ' \
                                                                                      '/, \\, *, :, ?, &lt;, &gt;, ' \
                                                                                      '|, &quot;.':
                                                    other += 1
                                                    dict_values1['other'] = other
                                                    with open('–ó–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫.txt', 'w') as dict_values:
                                                        dict_values.write(str(dict_values1))
                                                    shutil.move('photo.jpg', f'Others/{text}_{other}.jpg')
                                                    write_msg(peer_id, '–ë–æ—Ç –µ—â—ë –Ω–µ –Ω–∞—É—á–∏–ª—Å—è –µ–≥–æ(–µ—ë) —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å, —Ñ–æ—Ç–æ '
                                                                       '–¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–∞–ø–∫—É —Å –±—É–¥—É—â–∏–º–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –¥–ª—è '
                                                                       '—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.')
                                                    break
                                        break
                        elif neko_distance >= 1:
                            write_msg(peer_id, '–ë–æ—Ç –æ–±–Ω–∞—Ä—É–∂–∏–ª –∫–æ—à–∫–æ–¥–µ–≤–æ—á–∫—É –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ? –ù–∞–ø–∏—à–∏—Ç–µ –î–∞ '
                                               '–∏–ª–∏ –ù–µ—Ç.')
                            for event in VkLongPoll(session).listen():
                                if event.type == VkEventType.MESSAGE_NEW and event.to_me or event.from_me:
                                    user_id2 = event.user_id
                                    text = event.text.lower()
                                    if '–¥–∞' == text and user_id2 == user_id1:
                                        neko += 1
                                        dict_values1['neko'] = neko
                                        with open('–ó–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫.txt', 'w') as dict_values:
                                            dict_values.write(str(dict_values1))
                                        shutil.move('photo.jpg', f'Nekot/neko_{neko}.jpg')
                                        write_msg(peer_id, '–•–æ—Ä–æ—à–æ, —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∫–æ—à–∫–æ–¥–µ–≤–æ—á–µ–∫ —É–ª—É—á—à–∏–ª–æ—Å—å.')
                                        break
                                    elif '–Ω–µ—Ç' == text and user_id2 == user_id1:
                                        write_msg(peer_id, '–ë–æ—Ç –µ—â—ë —É—á–∏—Ç—Å—è, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —Ç–æ–≥–æ, —á—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ.')
                                        for event in VkLongPoll(session).listen():
                                            if event.type == VkEventType.MESSAGE_NEW and event.to_me or event.from_me:
                                                user_id2 = event.user_id
                                                text = event.text.lower()
                                                other_value = 0
                                                for value in other_dict.values():
                                                    if '_' in value:
                                                        value = value[:value.index('_')]
                                                    else:
                                                        value = value[:value.index('.')]
                                                    if text == value:
                                                        other_value = value
                                                if ('–∫–æ—Ç' in text or '–∫–æ—à–∫–∞' == text or '–∫–æ—à–∫–∏' == text or '–∫–æ—à–∞–∫' in
                                                        text) and user_id2 == user_id1:
                                                    cat += 1
                                                    dict_values1['cat'] = cat
                                                    with open('–ó–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫.txt', 'w') as dict_values:
                                                        dict_values.write(str(dict_values1))
                                                    shutil.move('photo.jpg', f'Cats/cat_{cat}.jpg')
                                                    write_msg(peer_id, '–•–æ—Ä–æ—à–æ, —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∫–æ—Ç–æ–≤ —É–ª—É—á—à–∏–ª–æ—Å—å.')
                                                    break
                                                elif ('—Å–æ–±–∞–∫' in text or '—â–µ–Ω–æ' in text or '–ø–µ—Å' in text or '–ø—ë—Å' in
                                                      text) and user_id2 == user_id1:
                                                    dog += 1
                                                    dict_values1['dog'] = dog
                                                    with open('–ó–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫.txt', 'w') as dict_values:
                                                        dict_values.write(str(dict_values1))
                                                    shutil.move('photo.jpg', f'Dogs/dog_{dog}.jpg')
                                                    write_msg(peer_id, '–•–æ—Ä–æ—à–æ, —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å–æ–±–∞–∫ —É–ª—É—á—à–∏–ª–æ—Å—å.')
                                                    break
                                                elif ('–Ω–µ–∫–æ' in text or '–∫–æ—à–∫–æ–¥–µ–≤–æ—á–∫–∞' == text or '–∫–æ—à–∫–æ–¥–µ–≤–æ—á–∫–∏' ==
                                                      text) and user_id2 == user_id1:
                                                    neko += 1
                                                    dict_values1['neko'] = neko
                                                    with open('–ó–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫.txt', 'w') as dict_values:
                                                        dict_values.write(str(dict_values1))
                                                    shutil.move('photo.jpg', f'Nekot/neko_{neko}.jpg')
                                                    write_msg(peer_id, '–•–æ—Ä–æ—à–æ, —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∫–æ—à–∫–æ–¥–µ–≤–æ—á–µ–∫ —É–ª—É—á—à–∏–ª–æ—Å—å.')
                                                    break
                                                elif text == other_value and user_id2 == user_id1:
                                                    other += 1
                                                    dict_values1['other'] = other
                                                    with open('–ó–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫.txt', 'w') as dict_values:
                                                        dict_values.write(str(dict_values1))
                                                    shutil.move('photo.jpg', f'Others/{text}_{other}.jpg')
                                                    write_msg(peer_id, f'–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '
                                                                       f'"{text}" —É–ª—É—á—à–µ–Ω–æ.')
                                                    break
                                                elif ('/' == text or '\\' == text or '&quot;' == text or '&lt;' ==
                                                      text or '&gt;' == text or '|' == text or '*' == text or '?' ==
                                                      text or ':' == text) and user_id2 == user_id1:
                                                    write_msg(peer_id, '–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏–º–≤–æ–ª—ã /, \\, *, :, ?, <, '
                                                                       '>, |, ".')
                                                elif user_id2 == user_id1 and text != '–Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏–º–≤–æ–ª—ã ' \
                                                                                      '/, \\, *, :, ?, &lt;, &gt;, ' \
                                                                                      '|, &quot;.':
                                                    other += 1
                                                    dict_values1['other'] = other
                                                    with open('–ó–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫.txt', 'w') as dict_values:
                                                        dict_values.write(str(dict_values1))
                                                    shutil.move('photo.jpg', f'Others/{text}_{other}.jpg')
                                                    write_msg(peer_id, '–ë–æ—Ç –µ—â—ë –Ω–µ –Ω–∞—É—á–∏–ª—Å—è –µ–≥–æ(–µ—ë) —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å, —Ñ–æ—Ç–æ '
                                                                       '–¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–∞–ø–∫—É —Å –±—É–¥—É—â–∏–º–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –¥–ª—è '
                                                                       '—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.')
                                                    break
                                        break
                        elif other_distance >= 1:
                            mnum = max(other_distances)
                            other_name2 = other_dict2[19]
                            if '_' in other_name2:
                                other_name2 = other_name2[:other_name2.index('_')]
                            else:
                                other_name2 = other_name2[:other_name2.index('.')]
                            write_msg(peer_id, f'–ù–∞ —Ñ–æ—Ç–æ, –≤–æ–∑–º–æ–∂–Ω–æ {other_name2}, —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ? –ù–∞–ø–∏—à–∏—Ç–µ –î–∞ –∏–ª–∏ –ù–µ—Ç.')
                            for event in VkLongPoll(session).listen():
                                if event.type == VkEventType.MESSAGE_NEW and event.to_me or event.from_me:
                                    user_id2 = event.user_id
                                    text = event.text.lower()
                                    if '–¥–∞' == text and user_id2 == user_id1:
                                        other += 1
                                        dict_values1['other'] = other
                                        with open('–ó–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫.txt', 'w') as dict_values:
                                            dict_values.write(str(dict_values1))
                                        shutil.move('photo.jpg', f'Others/{text}_{other}.jpg')
                                        write_msg(peer_id, f'–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{other_name2}" '
                                                           f'—É–ª—É—á—à–µ–Ω–æ.')
                                        break
                                    elif '–Ω–µ—Ç' == text and user_id2 == user_id1:
                                        write_msg(peer_id, '–ë–æ—Ç –µ—â—ë —É—á–∏—Ç—Å—è, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —Ç–æ–≥–æ, —á—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ.')
                                        for event in VkLongPoll(session).listen():
                                            if event.type == VkEventType.MESSAGE_NEW and event.to_me or event.from_me:
                                                user_id2 = event.user_id
                                                text = event.text.lower()
                                                other_value = 0
                                                for value in other_dict.values():
                                                    if '_' in value:
                                                        value = value[:value.index('_')]
                                                    else:
                                                        value = value[:value.index('.')]
                                                    if text == value:
                                                        other_value = value
                                                if ('–∫–æ—Ç' in text or '–∫–æ—à–∫–∞' == text or '–∫–æ—à–∫–∏' == text or '–∫–æ—à–∞–∫' in
                                                        text) and user_id2 == user_id1:
                                                    cat += 1
                                                    dict_values1['cat'] = cat
                                                    with open('–ó–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫.txt', 'w') as dict_values:
                                                        dict_values.write(str(dict_values1))
                                                    shutil.move('photo.jpg', f'Cats/cat_{cat}.jpg')
                                                    write_msg(peer_id, '–•–æ—Ä–æ—à–æ, —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∫–æ—Ç–æ–≤ —É–ª—É—á—à–∏–ª–æ—Å—å.')
                                                    break
                                                elif ('—Å–æ–±–∞–∫' in text or '—â–µ–Ω–æ' in text or '–ø–µ—Å' in text or '–ø—ë—Å' in
                                                      text) and user_id2 == user_id1:
                                                    dog += 1
                                                    dict_values1['dog'] = dog
                                                    with open('–ó–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫.txt', 'w') as dict_values:
                                                        dict_values.write(str(dict_values1))
                                                    shutil.move('photo.jpg', f'Dogs/dog_{dog}.jpg')
                                                    write_msg(peer_id, '–•–æ—Ä–æ—à–æ, —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å–æ–±–∞–∫ —É–ª—É—á—à–∏–ª–æ—Å—å.')
                                                    break
                                                elif ('–Ω–µ–∫–æ' in text or '–∫–æ—à–∫–æ–¥–µ–≤–æ—á–∫–∞' == text or '–∫–æ—à–∫–æ–¥–µ–≤–æ—á–∫–∏' ==
                                                      text) and user_id2 == user_id1:
                                                    neko += 1
                                                    dict_values1['neko'] = neko
                                                    with open('–ó–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫.txt', 'w') as dict_values:
                                                        dict_values.write(str(dict_values1))
                                                    shutil.move('photo.jpg', f'Nekot/neko_{neko}.jpg')
                                                    write_msg(peer_id, '–•–æ—Ä–æ—à–æ, —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∫–æ—à–∫–æ–¥–µ–≤–æ—á–µ–∫ —É–ª—É—á—à–∏–ª–æ—Å—å.')
                                                    break
                                                elif text == other_value and user_id2 == user_id1:
                                                    other += 1
                                                    dict_values1['other'] = other
                                                    with open('–ó–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫.txt', 'w') as dict_values:
                                                        dict_values.write(str(dict_values1))
                                                    shutil.move('photo.jpg', f'Others/{text}_{other}.jpg')
                                                    write_msg(peer_id, f'–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '
                                                                       f'"{text}" —É–ª—É—á—à–µ–Ω–æ.')
                                                    break
                                                elif ('/' == text or '\\' == text or '&quot;' == text or '&lt;' ==
                                                      text or '&gt;' == text or '|' == text or '*' == text or '?' ==
                                                      text or ':' == text) and user_id2 == user_id1:
                                                    write_msg(peer_id, '–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏–º–≤–æ–ª—ã /, \\, *, :, ?, <, '
                                                                       '>, |, ".')
                                                elif user_id2 == user_id1 and text != '–Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏–º–≤–æ–ª—ã ' \
                                                                                      '/, \\, *, :, ?, &lt;, &gt;, ' \
                                                                                      '|, &quot;.':
                                                    other += 1
                                                    dict_values1['other'] = other
                                                    with open('–ó–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫.txt', 'w') as dict_values:
                                                        dict_values.write(str(dict_values1))
                                                    shutil.move('photo.jpg', f'Others/{text}_{other}.jpg')
                                                    write_msg(peer_id, '–ë–æ—Ç –µ—â—ë –Ω–µ –Ω–∞—É—á–∏–ª—Å—è –µ–≥–æ(–µ—ë) —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å, —Ñ–æ—Ç–æ '
                                                                       '–¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–∞–ø–∫—É —Å –±—É–¥—É—â–∏–º–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –¥–ª—è '
                                                                       '—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.')
                                                    break
                                        break
                        else:
                            write_msg(peer_id, '–ë–æ—Ç –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.\n–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∂–µ –Ω–∞ –Ω–µ–π.')
                            for event in VkLongPoll(session).listen():
                                if event.type == VkEventType.MESSAGE_NEW and event.to_me or event.from_me:
                                    user_id2 = event.user_id
                                    text = event.text.lower()
                                    other_value = 0
                                    for value in other_dict.values():
                                        if '_' in value:
                                            value = value[:value.index('_')]
                                        else:
                                            value = value[:value.index('.')]
                                        if text == value:
                                            other_value = value
                                    if ('–∫–æ—Ç' in text or '–∫–æ—à–∫–∞' == text or '–∫–æ—à–∫–∏' == text or '–∫–æ—à–∞–∫' in
                                            text) and user_id2 == user_id1:
                                        cat += 1
                                        dict_values1['cat'] = cat
                                        with open('–ó–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫.txt', 'w') as dict_values:
                                            dict_values.write(str(dict_values1))
                                        shutil.move('photo.jpg', f'Cats/cat_{cat}.jpg')
                                        write_msg(peer_id, '–•–æ—Ä–æ—à–æ, —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∫–æ—Ç–æ–≤ —É–ª—É—á—à–∏–ª–æ—Å—å.')
                                        break
                                    elif ('—Å–æ–±–∞–∫' in text or '—â–µ–Ω–æ' in text or '–ø–µ—Å' in text or '–ø—ë—Å' in
                                          text) and user_id2 == user_id1:
                                        dog += 1
                                        dict_values1['dog'] = dog
                                        with open('–ó–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫.txt', 'w') as dict_values:
                                            dict_values.write(str(dict_values1))
                                        shutil.move('photo.jpg', f'Dogs/dog_{dog}.jpg')
                                        write_msg(peer_id, '–•–æ—Ä–æ—à–æ, —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å–æ–±–∞–∫ —É–ª—É—á—à–∏–ª–æ—Å—å.')
                                        break
                                    elif ('–Ω–µ–∫–æ' in text or '–∫–æ—à–∫–æ–¥–µ–≤–æ—á–∫–∞' == text or '–∫–æ—à–∫–æ–¥–µ–≤–æ—á–∫–∏' ==
                                          text) and user_id2 == user_id1:
                                        neko += 1
                                        dict_values1['neko'] = neko
                                        with open('–ó–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫.txt', 'w') as dict_values:
                                            dict_values.write(str(dict_values1))
                                        shutil.move('photo.jpg', f'Nekot/neko_{neko}.jpg')
                                        write_msg(peer_id, '–•–æ—Ä–æ—à–æ, —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∫–æ—à–∫–æ–¥–µ–≤–æ—á–µ–∫ —É–ª—É—á—à–∏–ª–æ—Å—å.')
                                        break
                                    elif text == other_value and user_id2 == user_id1:
                                        other += 1
                                        dict_values1['other'] = other
                                        with open('–ó–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫.txt', 'w') as dict_values:
                                            dict_values.write(str(dict_values1))
                                        shutil.move('photo.jpg', f'Others/{text}_{other}.jpg')
                                        write_msg(peer_id, f'–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '
                                                           f'"{text}" —É–ª—É—á—à–µ–Ω–æ.')
                                        break
                                    elif ('/' == text or '\\' == text or '&quot;' == text or '&lt;' == text or '&gt;'
                                          == text or '|' == text or '*' == text or '?' == text or ':' ==
                                          text) and user_id2 == user_id1:
                                        write_msg(peer_id, '–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏–º–≤–æ–ª—ã /, \\, *, :, ?, <, '
                                                           '>, |, ".')
                                    elif user_id2 == user_id1 and text != '–Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏–º–≤–æ–ª—ã /, \\, *, :, ' \
                                                                          '?, &lt;, &gt;, |, &quot;.':
                                        other += 1
                                        dict_values1['other'] = other
                                        with open('–ó–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫.txt', 'w') as dict_values:
                                            dict_values.write(str(dict_values1))
                                        shutil.move('photo.jpg', f'Others/{text}_{other}.jpg')
                                        write_msg(peer_id, '–ë–æ—Ç –µ—â—ë –Ω–µ –Ω–∞—É—á–∏–ª—Å—è –µ–≥–æ(–µ—ë) —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å, —Ñ–æ—Ç–æ '
                                                           '–¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–∞–ø–∫—É —Å –±—É–¥—É—â–∏–º–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –¥–ª—è '
                                                           '—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.')
                                        break
                    except requests.exceptions.InvalidURL:
                        write_msg(peer_id, 'üö´–û—à–∏–±–∫–∞, –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞üö´')
                    except requests.exceptions.MissingSchema:
                        write_msg(peer_id, 'üö´–û—à–∏–±–∫–∞, –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞üö´')
                    except PIL.UnidentifiedImageError:
                        write_msg(peer_id, 'üö´–û—à–∏–±–∫–∞, –±–æ—Ç –Ω–µ —Å–º–æ–≥ –æ—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—éüö´')
                    except TypeError:
                        write_msg(peer_id, 'üö´–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã —Å–µ—Ä–≤–µ—Ä–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏üö´')
                    except requests.exceptions.ConnectionError:
                        write_msg(peer_id, 'üö´–û—à–∏–±–∫–∞, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—éüö´')

                # —Ä–∞–±–æ—Ç–∞ —Å –∏–º–µ–Ω–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:

                # —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                elif '–∏–º—è ' == text[:4]:
                    user = user_info(user_id)  # –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ—ã –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ –µ–≥–æ –∞–π–¥–∏
                    name = user[0]['first_name'] + ' ' + user[0]['last_name']  # –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if user_id in dict_names1:  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ª–æ–≤–∞—Ä–µ
                        name = dict_names1[user_id]  # –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏ –µ–≥–æ –Ω–∞–ª–∏—á–∏–∏
                    nick = event.text[4:]
                    dict_names1[user_id] = nick
                    with open('–°–ª–æ–≤–∞—Ä—å –∏–º—ë–Ω.txt', 'w', encoding='utf-8') as dict_names:
                        dict_names.write(str(dict_names1))
                    write_msg(peer_id, f'@id{user_id} ({name}), –≤–∞—à–µ –Ω–æ–≤–æ–µ –∏–º—è - {nick}.\n–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ø '
                                       f'–Ω–æ–≤—ã—Ö –∏–º—ë–Ω –Ω–∞–ø–∏—à–∏—Ç–µ üëâ–ò–º–µ–Ω–∞üëà.\n–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ–µ –∏–º—è –Ω–∞–ø–∏—à–∏—Ç–µ üëâ–ö–∏–∫ –∏–º—èüëà.')

                # –≤—ã–≤–µ–¥–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –∏–º—ë–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                elif '–∏–º–µ–Ω–∞' == text:
                    s = []
                    for b in dict_names1.items():
                        user = user_info(b[0])
                        username = user[0]['first_name'] + ' ' + user[0]['last_name']
                        s.append(f'@id{b[0]} ({username}) - {b[1]}')
                    top = '\n'.join(s)
                    if top != '':
                        write_msg(peer_id, '–¢–æ–ø –Ω–æ–≤—ã—Ö –∏–º—ë–Ω:\n' + top)
                    else:
                        write_msg(peer_id, '–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–æ–≤—ã–º–∏ –∏–º–µ–Ω–∞–º–∏.')

                # —É–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–≥–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                elif '–∫–∏–∫ –∏–º—è' == text:
                    try:
                        user = user_info(user_id)  # –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ—ã –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ –µ–≥–æ –∞–π–¥–∏
                        # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –µ–≥–æ –≤ —Å–ª–æ–≤–∞—Ä–µ
                        nick = dict_names1[user_id]
                        del dict_names1[user_id]
                        with open('–°–ª–æ–≤–∞—Ä—å –∏–º—ë–Ω.txt', 'w') as dict_names:
                            dict_names.write(str(dict_names1))
                        name = user[0]['first_name'] + ' ' + user[0]['last_name']
                        write_msg(peer_id, f'@id{user_id} ({nick}), —Ç–µ–ø–µ—Ä—å –≤—ã —Å–Ω–æ–≤–∞ {name}.')
                    except KeyError:
                        write_msg(peer_id, '–£ –≤–∞—Å –∏ —Ç–∞–∫ –Ω–µ—Ç –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏.')

                # —Ä–∞–±–æ—Ç–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –∞–π–¥–∏:

                # –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–µ–≥–æ –∞–π–¥–∏
                elif 'id' == text:
                    write_msg(peer_id, f'–¢–≤–æ–π –∞–π–¥–∏: {user_id}')

                # –ø–æ–ª—É—á–µ–Ω–∏–µ —á—É–∂–æ–≥–æ –∞–π–¥–∏
                elif 'id ' == text[:3]:
                    try:
                        text = text.replace('id ', '')
                        user = user_info(user_id)
                        ids = user[0]['id']
                        write_msg(peer_id, f'–ê–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {ids}')
                    except vk_api.exceptions.ApiError:
                        write_msg(peer_id, 'üö´–û—à–∏–±–∫–∞, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥—ë–Ω –∫–æ—Ä–æ—Ç–∫–∏–π –∞–¥—Ä–µ—Åüö´')

                # –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–π–¥–∏ –≥—Ä—É–ø–ø—ã
                elif 'group id ' == text[:9]:
                    try:
                        text = text.replace('group id ', '')
                        group = session.method('groups.getById', {
                            "group_id": text
                        })
                        group_id = group[0]['id']
                        write_msg(peer_id, f'–ê–π–¥–∏ –≥—Ä—É–ø–ø—ã: {group_id}')
                    except vk_api.exceptions.ApiError:
                        write_msg(peer_id, 'üö´–û—à–∏–±–∫–∞, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥—ë–Ω –∫–æ—Ä–æ—Ç–∫–∏–π –∞–¥—Ä–µ—Åüö´')

                # —Å–µ–∫—Ä–µ—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –ë–æ—Ç–∞
                elif 'exit' == text:
                    if user_id == '–°–Æ–î–ê –ê–ô–î–ò':  # –æ–ø—è—Ç—å —Ç–≤–æ–π –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—èü§°
                        write_msg(peer_id, 'üí§–í—ã–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞üí§')
                        ex = 1
                        break

                # –∫–æ–º–∞–Ω–¥—ã –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
                elif '—Ä–µ—à–∏ ' == text[:5]:
                    try:
                        b = text.replace('—Ä–µ—à–∏ ', '')
                        c = str(float((eval(b))))
                        if '.0' in c[-2:]:
                            c = int(float(c))
                            write_msg(peer_id, f'–û—Ç–≤–µ—Ç: {c}')
                        else:
                            c = float(c)
                            write_msg(peer_id, f'–û—Ç–≤–µ—Ç: {c}')
                    except NameError:
                        write_msg(peer_id, 'üö´–û—à–∏–±–∫–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∏–º–µ—Äüö´')
                    except SyntaxError:
                        write_msg(peer_id, 'üö´–û—à–∏–±–∫–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∏–º–µ—Äüö´')
                    except TypeError:
                        write_msg(peer_id, 'üö´–û—à–∏–±–∫–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∏–º–µ—Äüö´')
                    except ZeroDivisionError:
                        write_msg(peer_id, 'üö´–ù–∞ 0 –¥–µ–ª–∏—Ç—å –Ω–µ–ª—å–∑—èüö´')
                    except ValueError:
                        write_msg(peer_id, 'üö´–û—à–∏–±–∫–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∏–º–µ—Äüö´')

                # –∫–æ–º–∞–Ω–¥—ã –†–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä–∞:

                # —Å–ª—É—á–∞–π–Ω—ã–µ —á–∏—Å–ª–∞:

                # 1 —á–∏—Å–ª–æ
                elif '—Ä–∞–Ω–¥ ' == text[:5]:
                    try:
                        text = text.replace('—Ä–∞–Ω–¥ ', '').split()
                        d = int(text[0])
                        e = int(text[1])
                        f = range(d, e)
                        g = str(random.choice(f))
                        write_msg(peer_id, '–†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ: ' + g)
                    except ValueError:
                        write_msg(peer_id, 'üö´–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥—ë–Ω –¥–∏–∞–ø–∞–∑–æ–Ω —á–∏—Å–µ–ªüö´')
                    except NameError:
                        write_msg(peer_id, 'üö´–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥—ë–Ω –¥–∏–∞–ø–∞–∑–æ–Ω —á–∏—Å–µ–ªüö´')
                    except IndexError:
                        write_msg(peer_id, 'üö´–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥—ë–Ω –¥–∏–∞–ø–∞–∑–æ–Ω —á–∏—Å–µ–ªüö´')
                    except TypeError:
                        write_msg(peer_id, 'üö´–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥—ë–Ω –¥–∏–∞–ø–∞–∑–æ–Ω —á–∏—Å–µ–ªüö´')
                    except SyntaxError:
                        write_msg(peer_id, 'üö´–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥—ë–Ω –¥–∏–∞–ø–∞–∑–æ–Ω —á–∏—Å–µ–ªüö´')

                # –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∏—Å–µ–ª
                elif '–Ω–µ—Å—Ä–∞–Ω–¥' == text[:7]:
                    try:
                        text = text.replace('–Ω–µ—Å—Ä–∞–Ω–¥', '')
                        g = int(text[:text.index(' ')])
                        text = text[text.index(' '):].split()
                        d = int(text[0])
                        e = int(text[1])
                        f = range(d, e)
                        h = str(random.sample(f, g))
                        write_msg(peer_id, '–†–∞–Ω–¥–æ–º–Ω—ã–µ —á–∏—Å–ª–∞: ' + h[1:-1])
                    except ValueError:
                        write_msg(peer_id, 'üö´–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–µ–ª –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ, –∏–ª–∏ '
                                           '–æ–Ω–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω—ãüö´')
                    except NameError:
                        write_msg(peer_id, 'üö´–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –¥–∏–∞–ø–∞–∑–æ–Ω —á–∏—Å–µ–ª –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ªüö´')
                    except IndexError:
                        write_msg(peer_id, 'üö´–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –¥–∏–∞–ø–∞–∑–æ–Ω —á–∏—Å–µ–ª –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ªüö´')
                    except TypeError:
                        write_msg(peer_id, 'üö´–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –¥–∏–∞–ø–∞–∑–æ–Ω —á–∏—Å–µ–ª –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ªüö´')
                    except SyntaxError:
                        write_msg(peer_id, 'üö´–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –¥–∏–∞–ø–∞–∑–æ–Ω —á–∏—Å–µ–ª –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ªüö´')

                # —Å–ª—É—á–∞–π–Ω—ã–µ —Å–ª–æ–≤–∞:

                # 1 —Å–ª–æ–≤–æ
                elif '—Å—Ä–∞–Ω–¥' == text[:5]:
                    try:
                        lw = text.replace('—Å—Ä–∞–Ω–¥ ', '').split()
                        rw = random.choice(lw)
                        write_msg(peer_id, '–°–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ: ' + rw)
                    except ValueError:
                        write_msg(peer_id, 'üö´–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥—ë–Ω —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤üö´')
                    except NameError:
                        write_msg(peer_id, 'üö´–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥—ë–Ω —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤üö´')
                    except IndexError:
                        write_msg(peer_id, 'üö´–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥—ë–Ω —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤üö´')
                    except TypeError:
                        write_msg(peer_id, 'üö´–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥—ë–Ω —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤üö´')
                    except SyntaxError:
                        write_msg(peer_id, 'üö´–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥—ë–Ω —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤üö´')

                # –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤
                elif '–Ω–µ—Å—Å—Ä–∞–Ω–¥' == text[:8]:
                    try:
                        text = text.replace('–Ω–µ—Å—Å—Ä–∞–Ω–¥', '')
                        n = int(text[:text.index(' ')])
                        lw = text = text[text.index(' '):].split()
                        lrw = str(random.sample(lw, n))[1:-1].replace("'", '')
                        write_msg(peer_id, '–†–∞–Ω–¥–æ–º–Ω—ã–µ —Å–ª–æ–≤–∞: ' + lrw)
                    except ValueError:
                        write_msg(peer_id, 'üö´–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ —Å–ø–∏—Å–∫–µ, –∏–ª–∏ –æ–Ω–∏ '
                                           '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω—ãüö´')
                    except NameError:
                        write_msg(peer_id, 'üö´–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω—ã —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤üö´')
                    except IndexError:
                        write_msg(peer_id, 'üö´–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω—ã —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤üö´')
                    except TypeError:
                        write_msg(peer_id, 'üö´–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω—ã —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤üö´')
                    except SyntaxError:
                        write_msg(peer_id, 'üö´–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω—ã —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤üö´')
    except requests.exceptions.ReadTimeout:
        print('–ü–æ—Ç–µ—Ä—è–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –≤–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ —Ñ–æ—Ä')
